(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{370:function(t,e,a){"use strict";a.r(e);var r=a(46),s=Object(r.a)({},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"概览"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概览","aria-hidden":"true"}},[t._v("#")]),t._v(" 概览")]),t._v(" "),a("p",[t._v("TypeScript 编译器源文件位于 "),a("a",{attrs:{href:"https://github.com/Microsoft/TypeScript/tree/master/src/compiler",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("src/compiler")]),a("OutboundLink")],1),t._v(" 目录下")]),t._v(" "),a("p",[t._v("它分为以下几个关键部分：")]),t._v(" "),a("ul",[a("li",[t._v("Scanner 扫描器（"),a("code",[t._v("scanner.ts")]),t._v("）")]),t._v(" "),a("li",[t._v("Parser 解析器（"),a("code",[t._v("parser.ts")]),t._v("）")]),t._v(" "),a("li",[t._v("Binder 绑定器（"),a("code",[t._v("binder.ts")]),t._v("）")]),t._v(" "),a("li",[t._v("Checker 检查器（"),a("code",[t._v("checker.ts")]),t._v("）")]),t._v(" "),a("li",[t._v("Emitter 发射器（"),a("code",[t._v("emitter.ts")]),t._v("）")])]),t._v(" "),a("p",[t._v("每个部分在源文件中均有独立文件，本章稍后会对这些部分做解释。")]),t._v(" "),a("h3",{attrs:{id:"byots"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#byots","aria-hidden":"true"}},[t._v("#")]),t._v(" BYOTS")]),t._v(" "),a("p",[t._v("我们有个名为 "),a("a",{attrs:{href:"https://github.com/basarat/byots",target:"_blank",rel:"noopener noreferrer"}},[t._v("Bring Your Own TypeScript (BYOTS)"),a("OutboundLink")],1),t._v(" 的项目，通过暴露内部接口让编译器 API 使用起来更简单。你可以在全局范围上暴露你 TypeScript 应用的本地变量。")]),t._v(" "),a("h3",{attrs:{id:"语法和语义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#语法和语义","aria-hidden":"true"}},[t._v("#")]),t._v(" 语法和语义")]),t._v(" "),a("p",[a("em",[t._v("语法")]),t._v("正确并不意味着"),a("em",[t._v("语义")]),t._v("上也正确。下面的 TypeScript 代码，语法合法，但是语义却不正确")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'not a number'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("code",[t._v("语义")]),t._v(" 从自然语言角度意味着有意义，理解这个概念对你很有用。")]),t._v(" "),a("h3",{attrs:{id:"处理概览"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#处理概览","aria-hidden":"true"}},[t._v("#")]),t._v(" 处理概览")]),t._v(" "),a("p",[t._v("以下演示简单说明 TypeScript 编译器如何将上述几个关键部分组合在一起：")]),t._v(" "),a("div",{staticClass:"language-code extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("SourceCode（源码） ~~ 扫描器 ~~> Token 流\n")])])]),a("div",{staticClass:"language-code extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Token 流 ~~ 解析器 ~~> AST（抽象语法树）\n")])])]),a("div",{staticClass:"language-code extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("AST ~~ 绑定器 ~~> Symbols（符号）\n")])])]),a("p",[t._v("符号（"),a("code",[t._v("Symbol")]),t._v("）是 TypeScript "),a("em",[t._v("语义")]),t._v("系统的主要构造块。如上所示，符号是绑定的结果。符号将 AST 中的声明节点与相同实体的其他声明相连。")]),t._v(" "),a("p",[t._v("符号和 AST 是检查器用来验证源代码"),a("em",[t._v("语义")]),t._v("的")]),t._v(" "),a("div",{staticClass:"language-code extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("AST + 符号 ~~ 检查器 ~~> 类型验证\n")])])]),a("p",[t._v("最后，需要输出 JavaScript 时：")]),t._v(" "),a("div",{staticClass:"language-code extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("AST + 检查器 ~~ 发射器 ~~> JavaScript 代码\n")])])]),a("p",[t._v("TypeScript 编译器中还有一些其他文件，为我们接下来介绍的很多关键部分提供实用工具。")]),t._v(" "),a("h2",{attrs:{id:"文件：utilities"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文件：utilities","aria-hidden":"true"}},[t._v("#")]),t._v(" 文件：Utilities")]),t._v(" "),a("p",[a("code",[t._v("core.ts")]),t._v(" ：TypeScript 编译器使用的核心工具集，重要的有：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("let objectAllocator: ObjectAllocator")]),t._v(" 是一个定义为全局单例的变量。提供以下定义：\n"),a("ul",[a("li",[a("code",[t._v("getNodeConstructor")]),t._v("（节点会在解析器 / AST 中介绍）")]),t._v(" "),a("li",[a("code",[t._v("getSymbolConstructor")]),t._v("（符号会在绑定器中介绍）")]),t._v(" "),a("li",[a("code",[t._v("getTypeConstructor")]),t._v("（类型会在检查器中介绍）")]),t._v(" "),a("li",[a("code",[t._v("getSignatureConstructor")]),t._v("（签名是索引，调用和构造签名）")])])])]),t._v(" "),a("h2",{attrs:{id:"文件：关键数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文件：关键数据结构","aria-hidden":"true"}},[t._v("#")]),t._v(" 文件：关键数据结构")]),t._v(" "),a("p",[a("code",[t._v("types.ts")]),t._v(" 包含整个编译器中使用的关键数据结构和接口，这里列出一些关键部分：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("SyntaxKind")]),t._v("\nAST 节点类型通过 "),a("code",[t._v("SyntaxKind")]),t._v(" 枚举进行识别")]),t._v(" "),a("li",[a("code",[t._v("TypeChecker")]),t._v("\n类型检查器提供此接口")]),t._v(" "),a("li",[a("code",[t._v("CompilerHost")]),t._v("\n用于程序（"),a("code",[t._v("Program")]),t._v("）和系统之间的交互")]),t._v(" "),a("li",[a("code",[t._v("Node")]),t._v("\nAST 节点")])]),t._v(" "),a("h2",{attrs:{id:"文件：系统"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文件：系统","aria-hidden":"true"}},[t._v("#")]),t._v(" 文件：系统")]),t._v(" "),a("p",[a("code",[t._v("system.ts")]),t._v("，TypeScript 编译器与操作系统的所有交互均通过 "),a("code",[t._v("System")]),t._v(" 接口进行。接口及其实现（"),a("code",[t._v("WScript")]),t._v(" 和 "),a("code",[t._v("Node")]),t._v("） 均定义在 "),a("code",[t._v("system.ts")]),t._v(" 中。你可以将其视为"),a("em",[t._v("操作环境（OE, Operating Environment）")]),t._v("。")]),t._v(" "),a("p",[t._v("现在对主要文件有一个整体了解了，我们继续介绍程序（"),a("router-link",{attrs:{to:"/compiler/program.html"}},[a("code",[t._v("Program")])]),t._v("）的概念")],1)])},[],!1,null,null,null);e.default=s.exports}}]);